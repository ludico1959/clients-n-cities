{
  "openapi": "3.0.1",
  "info": {
    "title": "Clients N' Cities",
    "description": "A simple API for relating clients to its cities.",
    "contact": {
      "email": "lucas.coelho@compasso.uol.com.br"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3333/api/v1/",
      "description": "Base URL"
    }
  ],
  "paths": {
    "/clients": {
      "post": {
        "summary": "Insert client into the database",
        "description": "This route uses req.body to get information about the client and insert into the database.",
        "tags": [
          "Client"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Client"
              },
              "examples": {
                "person": {
                  "value": {
                    "name": "Garry Kasparov",
                    "sex": "M",
                    "birthday": "01/01/2000",
                    "city_id": "kasparov@email.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client was successful created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "400": {
            "description": "req.body had invalid items to insert"
          }
        }
      }
    },
    "/clients/name/{name}": {
      "get": {
        "summary": "Find client by its name",
        "description": "This route uses req.params.name and returns a client with its informations from the database based on its param.",
        "tags": [
          "Client"
        ],
        "responses": {
          "200": {
            "description": "Client's data was successful found and returned"
          },
          "400": {
            "description": "Invalid name format"
          },
          "404": {
            "description": "Client not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/clients/{id}": {
      "get": {
        "summary": "Find client by its ID",
        "description": "This route uses req.params.id and returns a client with its informations from the database based on its param.",
        "tags": [
          "Client"
        ],
        "responses": {
          "200": {
            "description": "Client's data was successful found and returned"
          },
          "400": {
            "description": "Invalid ID format"
          },
          "404": {
            "description": "Client not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "summary": "Delete client by its ID",
        "description": "This route uses req.params.id and deletes a client from the database based on its param.",
        "tags": [
          "Client"
        ],
        "responses": {
          "204": {
            "description": "Client was successful deleted"
          },
          "400": {
            "description": "Invalid ID format"
          },
          "404": {
            "description": "Client not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "summary": "Update client's name by its ID",
        "description": "This route uses req.params.id to find a client in the database based on its param and req.body to updates the client's name.",
        "tags": [
          "Client"
        ],
        "responses": {
          "200": {
            "description": "Person updated with success"
          },
          "400": {
            "description": "Wrong id or content format"
          },
          "404": {
            "description": "Person not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Client"
              },
              "examples": {
                "person": {
                  "value": {
                    "name": "Vladimir Kramnik"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cities": {
      "post": {
        "summary": "Insert city into the database",
        "description": "This route uses req.body to get information about the city and insert into the database.",
        "tags": [
          "City"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/City"
              },
              "examples": {
                "city": {
                  "value": {
                    "name": "Bag√©",
                    "state": "RS"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "City was successful created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/City"
                }
              }
            }
          },
          "400": {
            "description": "req.body had invalid items to insert"
          }
        }
      }
    },
    "/cities/name/{name}": {
      "get": {
        "summary": "Find city by its name",
        "description": "This route uses req.params.name and returns a city with its informations from the database based on its param.",
        "tags": [
          "City"
        ],
        "responses": {
          "200": {
            "description": "City's data was successful found and returned"
          },
          "400": {
            "description": "Invalid name format"
          },
          "404": {
            "description": "City not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/cities/state/{state}": {
      "get": {
        "summary": "Find list of cities by its state",
        "description": "This route uses req.params.state and returns a list of cities with its informations from the database based on its param.",
        "tags": [
          "City"
        ],
        "responses": {
          "200": {
            "description": "State and its cities' data was successful found and returned"
          },
          "400": {
            "description": "Invalid state format"
          },
          "404": {
            "description": "State and its cities not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "state",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/components/schemas/Cities"
            }
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Client": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "data_nascimento": {
            "type": "string"
          },
          "age": {
            "type": "number"
          },
          "city_id": {
            "type": "string"
          }
        }
      },
      "City": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "Cities": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/City"
        }
      }
    }
  }
}